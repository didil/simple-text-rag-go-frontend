// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: protos/qa.proto

package grpc_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QAServiceClient is the client API for QAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QAServiceClient interface {
	// Creates a new collection
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error)
	// Gets an answer for a given question from the specified collection
	GetAnswer(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*Answer, error)
}

type qAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQAServiceClient(cc grpc.ClientConnInterface) QAServiceClient {
	return &qAServiceClient{cc}
}

func (c *qAServiceClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error) {
	out := new(CreateCollectionResponse)
	err := c.cc.Invoke(ctx, "/qa.QAService/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAServiceClient) GetAnswer(ctx context.Context, in *GetAnswerRequest, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/qa.QAService/GetAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QAServiceServer is the server API for QAService service.
// All implementations must embed UnimplementedQAServiceServer
// for forward compatibility
type QAServiceServer interface {
	// Creates a new collection
	CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error)
	// Gets an answer for a given question from the specified collection
	GetAnswer(context.Context, *GetAnswerRequest) (*Answer, error)
	mustEmbedUnimplementedQAServiceServer()
}

// UnimplementedQAServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQAServiceServer struct {
}

func (UnimplementedQAServiceServer) CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedQAServiceServer) GetAnswer(context.Context, *GetAnswerRequest) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswer not implemented")
}
func (UnimplementedQAServiceServer) mustEmbedUnimplementedQAServiceServer() {}

// UnsafeQAServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QAServiceServer will
// result in compilation errors.
type UnsafeQAServiceServer interface {
	mustEmbedUnimplementedQAServiceServer()
}

func RegisterQAServiceServer(s grpc.ServiceRegistrar, srv QAServiceServer) {
	s.RegisterService(&QAService_ServiceDesc, srv)
}

func _QAService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAService/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAServiceServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAService_GetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAServiceServer).GetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAService/GetAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAServiceServer).GetAnswer(ctx, req.(*GetAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QAService_ServiceDesc is the grpc.ServiceDesc for QAService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QAService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qa.QAService",
	HandlerType: (*QAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _QAService_CreateCollection_Handler,
		},
		{
			MethodName: "GetAnswer",
			Handler:    _QAService_GetAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/qa.proto",
}
